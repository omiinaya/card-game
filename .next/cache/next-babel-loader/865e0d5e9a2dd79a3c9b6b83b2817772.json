{"ast":null,"code":"import models from '../../models/index';\nimport nextConnect from 'next-connect';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nconst KEY = process.env.JWT_KEY;\nconst handler = nextConnect().get((req, res) => {}).post(async (req, res) => {\n  /* Get Post Data */\n  const {\n    username,\n    password\n  } = req.body;\n  /* Any how email or password is blank */\n\n  if (!username || !password) {\n    return res.status(400).json({\n      status: 'error',\n      error: 'Request missing username or password'\n    });\n  }\n  /* Check user in database */\n\n\n  let user = await models.users.findOne({\n    where: {\n      username: username\n    },\n    attributes: ['id', 'email', 'username', 'password'],\n    limit: 1\n  });\n  console.log(user);\n  /* Check if exists */\n\n  if (!user) {\n    return res.status(400).json({\n      status: 'error',\n      error: 'User Not Found'\n    });\n  }\n  /* Define variables */\n\n\n  const dataUser = user.toJSON();\n  const userId = dataUser.id,\n        userName = dataUser.username,\n        userPassword = dataUser.password;\n  /* Check and compare password */\n\n  bcrypt.compare(password, userPassword).then(isMatch => {\n    console.log(password);\n    console.log(userPassword);\n\n    if (isMatch) {\n      /* User matched */\n\n      /* Create JWT Payload */\n      const payload = {\n        id: userId,\n        username: userName\n      };\n      /* Sign token */\n\n      jwt.sign(payload, KEY, {\n        expiresIn: 31556926 // 1 year in seconds\n\n      }, (err, token) => {\n        res.status(200).json({\n          success: true,\n          token: 'Bearer ' + token\n        });\n      });\n    } else {\n      res.status(400).json({\n        status: 'error',\n        error: 'Password incorrect'\n      });\n    }\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/pages/api/auth.js"],"names":["models","nextConnect","bcrypt","jwt","KEY","process","env","JWT_KEY","handler","get","req","res","post","username","password","body","status","json","error","user","users","findOne","where","attributes","limit","console","log","dataUser","toJSON","userId","id","userName","userPassword","compare","then","isMatch","payload","sign","expiresIn","err","token","success"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAxB;AAEA,MAAMC,OAAO,GAAGP,WAAW,GACxBQ,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc,CAAG,CADR,EAEbC,IAFa,CAER,OAAOF,GAAP,EAAYC,GAAZ,KAAoB;AACxB;AACA,QAAM;AAAEE,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBJ,GAAG,CAACK,IAAnC;AACA;;AACA,MAAI,CAACF,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,WAAOH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,OADkB;AAE1BE,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;AACD;;;AACA,MAAIC,IAAI,GAAG,MAAMnB,MAAM,CAACoB,KAAP,CAAaC,OAAb,CAAqB;AACpCC,IAAAA,KAAK,EAAE;AAAET,MAAAA,QAAQ,EAAEA;AAAZ,KAD6B;AAEpCU,IAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAhB,EAA4B,UAA5B,CAFwB;AAGpCC,IAAAA,KAAK,EAAE;AAH6B,GAArB,CAAjB;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA;;AACA,MAAI,CAACA,IAAL,EAAW;AACT,WAAOR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,OADkB;AAE1BE,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;AACD;;;AACA,QAAMS,QAAQ,GAAGR,IAAI,CAACS,MAAL,EAAjB;AACA,QAAMC,MAAM,GAAGF,QAAQ,CAACG,EAAxB;AAAA,QACEC,QAAQ,GAAGJ,QAAQ,CAACd,QADtB;AAAA,QAEEmB,YAAY,GAAGL,QAAQ,CAACb,QAF1B;AAGA;;AACAZ,EAAAA,MAAM,CAAC+B,OAAP,CAAenB,QAAf,EAAyBkB,YAAzB,EAAuCE,IAAvC,CAA4CC,OAAO,IAAI;AACrDV,IAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;;AACA,QAAIG,OAAJ,EAAa;AACX;;AACA;AACA,YAAMC,OAAO,GAAG;AACdN,QAAAA,EAAE,EAAED,MADU;AAEdhB,QAAAA,QAAQ,EAAEkB;AAFI,OAAhB;AAIA;;AACA5B,MAAAA,GAAG,CAACkC,IAAJ,CACED,OADF,EAEEhC,GAFF,EAGE;AACEkC,QAAAA,SAAS,EAAE,QADb,CACuB;;AADvB,OAHF,EAME,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd7B,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBwB,UAAAA,OAAO,EAAE,IADU;AAEnBD,UAAAA,KAAK,EAAE,YAAYA;AAFA,SAArB;AAID,OAXH;AAaD,KArBD,MAqBO;AACL7B,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,OADW;AAEnBE,QAAAA,KAAK,EAAE;AAFY,OAArB;AAID;AACF,GA9BD;AA+BD,CAhEa,CAAhB;AAiEA,eAAeV,OAAf","sourcesContent":["import models from '../../models/index';\nimport nextConnect from 'next-connect';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nconst KEY = process.env.JWT_KEY;\n\nconst handler = nextConnect()\n  .get((req, res) => { })\n  .post(async (req, res) => {\n    /* Get Post Data */\n    const { username, password } = req.body;\n    /* Any how email or password is blank */\n    if (!username || !password) {\n      return res.status(400).json({\n        status: 'error',\n        error: 'Request missing username or password',\n      });\n    }\n    /* Check user in database */\n    let user = await models.users.findOne({\n      where: { username: username },\n      attributes: ['id', 'email', 'username', 'password'],\n      limit: 1,\n    });\n\n    console.log(user)\n    /* Check if exists */\n    if (!user) {\n      return res.status(400).json({\n        status: 'error',\n        error: 'User Not Found'\n      });\n    }\n    /* Define variables */\n    const dataUser = user.toJSON();\n    const userId = dataUser.id,\n      userName = dataUser.username,\n      userPassword = dataUser.password;\n    /* Check and compare password */\n    bcrypt.compare(password, userPassword).then(isMatch => {\n      console.log(password)\n      console.log(userPassword)\n      if (isMatch) {\n        /* User matched */\n        /* Create JWT Payload */\n        const payload = {\n          id: userId,\n          username: userName,\n        };\n        /* Sign token */\n        jwt.sign(\n          payload,\n          KEY,\n          {\n            expiresIn: 31556926, // 1 year in seconds\n          },\n          (err, token) => {\n            res.status(200).json({\n              success: true,\n              token: 'Bearer ' + token,\n            });\n          },\n        );\n      } else {\n        res.status(400).json({\n          status: 'error',\n          error: 'Password incorrect'\n        });\n      }\n    });\n  });\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}