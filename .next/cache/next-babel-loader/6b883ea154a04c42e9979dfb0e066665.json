{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nfernal\\\\Desktop\\\\nextjs-sequelize\\\\components\\\\board\\\\Box.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDrag } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport MonsterCard from '../monsterCard/MonsterCard';\nconst style = {\n  border: '1px dashed gray',\n  backgroundColor: 'white',\n  padding: '0.5rem 1rem',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  cursor: 'move',\n  float: 'left'\n};\nexport const Box = function Box(props) {\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: ItemTypes.BOX,\n    item: props.name,\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n\n      if (item && dropResult) {\n        //function executed on drop\n        console.log(`You dropped ${item.name} into ${dropResult.name}!`);\n      }\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n      handlerId: monitor.getHandlerId()\n    })\n  }));\n  const opacity = isDragging ? 0.4 : 1;\n  return __jsx(\"div\", {\n    ref: drag,\n    role: \"Box\",\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      opacity\n    }),\n    \"data-testid\": `box-${name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, __jsx(MonsterCard, {\n    cardName: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/components/board/Box.jsx"],"names":["useDrag","ItemTypes","MonsterCard","style","border","backgroundColor","padding","marginRight","marginBottom","cursor","float","Box","props","isDragging","drag","type","BOX","item","name","end","monitor","dropResult","getDropResult","console","log","collect","handlerId","getHandlerId","opacity"],"mappings":";;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,iBADE;AAEVC,EAAAA,eAAe,EAAE,OAFP;AAGVC,EAAAA,OAAO,EAAE,aAHC;AAIVC,EAAAA,WAAW,EAAE,QAJH;AAKVC,EAAAA,YAAY,EAAE,QALJ;AAMVC,EAAAA,MAAM,EAAE,MANE;AAOVC,EAAAA,KAAK,EAAE;AAPG,CAAd;AASA,OAAO,MAAMC,GAAG,GAAG,SAASA,GAAT,CAAaC,KAAb,EAAoB;AACnC,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBd,OAAO,CAAC,OAAO;AAC1Ce,IAAAA,IAAI,EAAEd,SAAS,CAACe,GAD0B;AAE1CC,IAAAA,IAAI,EAAEL,KAAK,CAACM,IAF8B;AAG1CC,IAAAA,GAAG,EAAE,CAACF,IAAD,EAAOG,OAAP,KAAmB;AACpB,YAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;;AACA,UAAIL,IAAI,IAAII,UAAZ,EAAwB;AACpB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAa,eAAcP,IAAI,CAACC,IAAK,SAAQG,UAAU,CAACH,IAAK,GAA7D;AACH;AACJ,KATyC;AAU1CO,IAAAA,OAAO,EAAGL,OAAD,KAAc;AACnBP,MAAAA,UAAU,EAAEO,OAAO,CAACP,UAAR,EADO;AAEnBa,MAAAA,SAAS,EAAEN,OAAO,CAACO,YAAR;AAFQ,KAAd;AAViC,GAAP,CAAD,CAAtC;AAeA,QAAMC,OAAO,GAAGf,UAAU,GAAG,GAAH,GAAS,CAAnC;AACA,SAAQ;AAAK,IAAA,GAAG,EAAEC,IAAV;AAAgB,IAAA,IAAI,EAAC,KAArB;AAA2B,IAAA,KAAK,kCAAOX,KAAP;AAAcyB,MAAAA;AAAd,MAAhC;AAAyD,mBAAc,OAAMV,IAAK,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,WAAD;AACI,IAAA,QAAQ,EAAEA,IADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAAR;AAKH,CAtBM","sourcesContent":["import { useDrag } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport MonsterCard from '../monsterCard/MonsterCard'\r\n\r\nconst style = {\r\n    border: '1px dashed gray',\r\n    backgroundColor: 'white',\r\n    padding: '0.5rem 1rem',\r\n    marginRight: '1.5rem',\r\n    marginBottom: '1.5rem',\r\n    cursor: 'move',\r\n    float: 'left',\r\n};\r\nexport const Box = function Box(props) {\r\n    const [{ isDragging }, drag] = useDrag(() => ({\r\n        type: ItemTypes.BOX,\r\n        item: props.name,\r\n        end: (item, monitor) => {\r\n            const dropResult = monitor.getDropResult();\r\n            if (item && dropResult) {\r\n                //function executed on drop\r\n                console.log(`You dropped ${item.name} into ${dropResult.name}!`);\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n            handlerId: monitor.getHandlerId(),\r\n        }),\r\n    }));\r\n    const opacity = isDragging ? 0.4 : 1;\r\n    return (<div ref={drag} role=\"Box\" style={{ ...style, opacity }} data-testid={`box-${name}`}>\r\n            <MonsterCard\r\n                cardName={name}\r\n            />\r\n\t\t</div>);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}