{"ast":null,"code":"import models from '../../db/models/index';\nimport nextConnect from 'next-connect';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nconst KEY = process.env.JWT_KEY;\nconst handler = nextConnect().get((req, res) => {}).post(async (req, res) => {\n  /* Get Post Data */\n  const {\n    email,\n    password\n  } = req.body;\n  /* Any how email or password is blank */\n\n  if (!email || !password) {\n    return res.status(400).json({\n      status: 'error',\n      error: 'Request missing username or password'\n    });\n  }\n  /* Check user in database */\n\n\n  const user = await models.users.findOne({\n    where: {\n      email: email\n    },\n    attributes: ['email'],\n    limit: 1\n  });\n  /* Check if exists */\n\n  if (!user) {\n    res.status(400).json({\n      status: 'error',\n      error: 'User Not Found'\n    });\n  }\n  /* Define variables */\n\n\n  const dataUser = user.toJSON();\n  const userId = dataUser.id,\n        userEmail = dataUser.email,\n        userPassword = dataUser.password;\n  /* Check and compare password */\n\n  bcrypt.compare(password, userPassword).then(isMatch => {\n    console.log(password);\n    console.log(userPassword);\n\n    if (isMatch) {\n      /* User matched */\n\n      /* Create JWT Payload */\n      const payload = {\n        id: userId,\n        email: userEmail\n      };\n      /* Sign token */\n\n      jwt.sign(payload, KEY, {\n        expiresIn: 31556926 // 1 year in seconds\n\n      }, (err, token) => {\n        res.status(200).json({\n          success: true,\n          token: 'Bearer ' + token\n        });\n      });\n    } else {\n      res.status(400).json({\n        status: 'error',\n        error: 'Password incorrect'\n      });\n    }\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Mr.X/Desktop/nextjs-sequelize/pages/api/auth.js"],"names":["models","nextConnect","bcrypt","jwt","KEY","process","env","JWT_KEY","handler","get","req","res","post","email","password","body","status","json","error","user","users","findOne","where","attributes","limit","dataUser","toJSON","userId","id","userEmail","userPassword","compare","then","isMatch","console","log","payload","sign","expiresIn","err","token","success"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAxB;AAEA,MAAMC,OAAO,GAAGP,WAAW,GACxBQ,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc,CAAE,CADP,EAEbC,IAFa,CAER,OAAOF,GAAP,EAAYC,GAAZ,KAAoB;AACxB;AACA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,GAAG,CAACK,IAAhC;AACA;;AACA,MAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,WAAOH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,OADkB;AAE1BE,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;AACD;;;AACA,QAAMC,IAAI,GAAG,MAAMnB,MAAM,CAACoB,KAAP,CAAaC,OAAb,CAAqB;AACtCC,IAAAA,KAAK,EAAE;AAAET,MAAAA,KAAK,EAAEA;AAAT,KAD+B;AAEtCU,IAAAA,UAAU,EAAE,CAAC,OAAD,CAF0B;AAGtCC,IAAAA,KAAK,EAAE;AAH+B,GAArB,CAAnB;AAKA;;AACA,MAAI,CAACL,IAAL,EAAW;AACTR,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,OAAV;AAAmBE,MAAAA,KAAK,EAAE;AAA1B,KAArB;AACD;AACD;;;AACA,QAAMO,QAAQ,GAAGN,IAAI,CAACO,MAAL,EAAjB;AACA,QAAMC,MAAM,GAAGF,QAAQ,CAACG,EAAxB;AAAA,QACEC,SAAS,GAAGJ,QAAQ,CAACZ,KADvB;AAAA,QAEEiB,YAAY,GAAGL,QAAQ,CAACX,QAF1B;AAGA;;AACAZ,EAAAA,MAAM,CAAC6B,OAAP,CAAejB,QAAf,EAAyBgB,YAAzB,EAAuCE,IAAvC,CAA4CC,OAAO,IAAI;AACrDC,IAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AACA,QAAIG,OAAJ,EAAa;AACX;;AACA;AACA,YAAMG,OAAO,GAAG;AACdR,QAAAA,EAAE,EAAED,MADU;AAEdd,QAAAA,KAAK,EAAEgB;AAFO,OAAhB;AAIA;;AACA1B,MAAAA,GAAG,CAACkC,IAAJ,CACED,OADF,EAEEhC,GAFF,EAGE;AACEkC,QAAAA,SAAS,EAAE,QADb,CACuB;;AADvB,OAHF,EAME,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd7B,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBwB,UAAAA,OAAO,EAAE,IADU;AAEnBD,UAAAA,KAAK,EAAE,YAAYA;AAFA,SAArB;AAID,OAXH;AAaD,KArBD,MAqBO;AACL7B,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,OAAV;AAAmBE,QAAAA,KAAK,EAAE;AAA1B,OAArB;AACD;AACF,GA3BD;AA4BD,CAxDa,CAAhB;AAyDA,eAAeV,OAAf","sourcesContent":["import models from '../../db/models/index';\r\nimport nextConnect from 'next-connect';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst KEY = process.env.JWT_KEY;\r\n\r\nconst handler = nextConnect()\r\n  .get((req, res) => {})\r\n  .post(async (req, res) => {\r\n    /* Get Post Data */\r\n    const { email, password } = req.body;\r\n    /* Any how email or password is blank */\r\n    if (!email || !password) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Request missing username or password',\r\n      });\r\n    }\r\n    /* Check user in database */\r\n    const user = await models.users.findOne({\r\n      where: { email: email },\r\n      attributes: ['email'],\r\n      limit: 1,\r\n    });\r\n    /* Check if exists */\r\n    if (!user) {\r\n      res.status(400).json({ status: 'error', error: 'User Not Found' });\r\n    }\r\n    /* Define variables */\r\n    const dataUser = user.toJSON();\r\n    const userId = dataUser.id,\r\n      userEmail = dataUser.email,\r\n      userPassword = dataUser.password;\r\n    /* Check and compare password */\r\n    bcrypt.compare(password, userPassword).then(isMatch => {\r\n      console.log(password)\r\n      console.log(userPassword)\r\n      if (isMatch) {\r\n        /* User matched */\r\n        /* Create JWT Payload */\r\n        const payload = {\r\n          id: userId,\r\n          email: userEmail,\r\n        };\r\n        /* Sign token */\r\n        jwt.sign(\r\n          payload,\r\n          KEY,\r\n          {\r\n            expiresIn: 31556926, // 1 year in seconds\r\n          },\r\n          (err, token) => {\r\n            res.status(200).json({\r\n              success: true,\r\n              token: 'Bearer ' + token,\r\n            });\r\n          },\r\n        );\r\n      } else {\r\n        res.status(400).json({ status: 'error', error: 'Password incorrect' });\r\n      }\r\n    });\r\n  });\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}