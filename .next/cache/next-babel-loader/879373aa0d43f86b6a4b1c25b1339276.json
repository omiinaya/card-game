{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\n\nconst models = require('../../../db/models/index');\n\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    slug\n  } = req.query;\n  const post = await models.posts.findOne({\n    where: {\n      slug: slug\n    },\n    include: [{\n      model: models.users,\n      as: 'user'\n    }],\n    order: [// Will escape title and validate DESC against a list of valid direction parameters\n    ['createdAt', 'ASC']]\n  });\n  res.statusCode = 200;\n  return res.json({\n    status: 'success',\n    data: post\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    title,\n    content\n  } = body;\n  const {\n    user\n  } = req;\n  const newPost = await models.posts.create({\n    title,\n    content,\n    status: 1,\n    userId: user.id\n  });\n  return res.status(200).json({\n    status: 'success',\n    message: 'done',\n    data: newPost\n  });\n}) // Put method\n.put(async (req, res) => {\n  res.end('method - put');\n}) // Patch method\n.patch(async (req, res) => {\n  throw new Error('Throws me around! Error can be caught and handled.');\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Mr.X/Desktop/nextjs-sequelize/pages/api/post/[slug].js"],"names":["nextConnect","middleware","models","require","handler","use","get","req","res","slug","query","post","posts","findOne","where","include","model","users","as","order","statusCode","json","status","data","body","title","content","user","newPost","create","userId","id","message","put","end","patch","Error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AAEA,MAAMC,OAAO,GAAGJ,WAAW,GACzB;AADyB,CAExBK,GAFa,CAETJ,UAFS,EAGd;AAHc,CAIbK,GAJa,CAIT,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAWF,GAAG,CAACG,KAArB;AACA,QAAMC,IAAI,GAAG,MAAMT,MAAM,CAACU,KAAP,CAAaC,OAAb,CAAqB;AACtCC,IAAAA,KAAK,EAAE;AACLL,MAAAA,IAAI,EAAEA;AADD,KAD+B;AAItCM,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,KAAK,EAAEd,MAAM,CAACe,KADhB;AAEEC,MAAAA,EAAE,EAAE;AAFN,KADO,CAJ6B;AAUtCC,IAAAA,KAAK,EAAE,CACL;AACA,KAAC,WAAD,EAAc,KAAd,CAFK;AAV+B,GAArB,CAAnB;AAeAX,EAAAA,GAAG,CAACY,UAAJ,GAAiB,GAAjB;AACA,SAAOZ,GAAG,CAACa,IAAJ,CAAS;AAAEC,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,IAAI,EAAEZ;AAA3B,GAAT,CAAP;AACD,CAvBa,EAwBd;AAxBc,CAyBbA,IAzBa,CAyBR,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAM;AAAEgB,IAAAA;AAAF,MAAWjB,GAAjB;AACA,QAAM;AAAEkB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBF,IAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWpB,GAAjB;AACA,QAAMqB,OAAO,GAAG,MAAM1B,MAAM,CAACU,KAAP,CAAaiB,MAAb,CAAoB;AACxCJ,IAAAA,KADwC;AAExCC,IAAAA,OAFwC;AAGxCJ,IAAAA,MAAM,EAAE,CAHgC;AAIxCQ,IAAAA,MAAM,EAAEH,IAAI,CAACI;AAJ2B,GAApB,CAAtB;AAMA,SAAOvB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,IAAAA,MAAM,EAAE,SADkB;AAE1BU,IAAAA,OAAO,EAAE,MAFiB;AAG1BT,IAAAA,IAAI,EAAEK;AAHoB,GAArB,CAAP;AAKD,CAxCa,EAyCd;AAzCc,CA0CbK,GA1Ca,CA0CT,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,cAAR;AACD,CA5Ca,EA6Cd;AA7Cc,CA8CbC,KA9Ca,CA8CP,OAAO5B,GAAP,EAAYC,GAAZ,KAAoB;AACzB,QAAM,IAAI4B,KAAJ,CAAU,oDAAV,CAAN;AACD,CAhDa,CAAhB;AAkDA,eAAehC,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nconst models = require('../../../db/models/index');\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const { slug } = req.query;\r\n    const post = await models.posts.findOne({\r\n      where: {\r\n        slug: slug,\r\n      },\r\n      include: [\r\n        {\r\n          model: models.users,\r\n          as: 'user',\r\n        },\r\n      ],\r\n      order: [\r\n        // Will escape title and validate DESC against a list of valid direction parameters\r\n        ['createdAt', 'ASC'],\r\n      ],\r\n    });\r\n    res.statusCode = 200;\r\n    return res.json({ status: 'success', data: post });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { title, content } = body;\r\n    const { user } = req;\r\n    const newPost = await models.posts.create({\r\n      title,\r\n      content,\r\n      status: 1,\r\n      userId: user.id,\r\n    });\r\n    return res.status(200).json({\r\n      status: 'success',\r\n      message: 'done',\r\n      data: newPost,\r\n    });\r\n  })\r\n  // Put method\r\n  .put(async (req, res) => {\r\n    res.end('method - put');\r\n  })\r\n  // Patch method\r\n  .patch(async (req, res) => {\r\n    throw new Error('Throws me around! Error can be caught and handled.');\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}