{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Nfernal\\\\Desktop\\\\nextjs-sequelize\\\\components\\\\game\\\\Field.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport CardCard from '../cardCard/CardCard';\nvar style = {\n  height: '250px',\n  width: '100%',\n  color: 'white',\n  zIndex: 5,\n  position: 'absolute',\n  bottom: '150px'\n};\nexport var Field = function Field(props) {\n  _s();\n\n  console.log(props.cards);\n\n  var _useDrop = useDrop(function () {\n    return {\n      accept: ItemTypes.CARD,\n      drop: function drop() {\n        return {\n          name: 'Field'\n        };\n      },\n      collect: function collect(monitor) {\n        return {\n          isOver: monitor.isOver(),\n          canDrop: monitor.canDrop()\n        };\n      }\n    };\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      _useDrop2$ = _useDrop2[0],\n      canDrop = _useDrop2$.canDrop,\n      isOver = _useDrop2$.isOver,\n      drop = _useDrop2[1];\n\n  var isActive = canDrop && isOver;\n  var backgroundColor = '#222';\n\n  if (isActive) {\n    backgroundColor = 'darkgreen';\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki';\n  }\n\n  return __jsx(\"div\", {\n    ref: drop,\n    role: 'Field',\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      backgroundColor: backgroundColor\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      margin: '0 auto',\n      position: 'absolute',\n      top: '50%',\n      transform: 'translateY(-50%)',\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, props.cards.map(function (card) {\n    return __jsx(\"div\", {\n      style: {\n        margin: '20px'\n      },\n      key: 'field' + card.cardName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, __jsx(CardCard, {\n      cardName: card.cardName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }));\n  })));\n};\n\n_s(Field, \"F504N0wuFSbvI1XEbEwXUidFCiM=\", false, function () {\n  return [useDrop];\n});\n\n_c = Field;\nexport default Field;\n\nvar _c;\n\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/components/game/Field.jsx"],"names":["useDrop","ItemTypes","CardCard","style","height","width","color","zIndex","position","bottom","Field","props","console","log","cards","accept","CARD","drop","name","collect","monitor","isOver","canDrop","isActive","backgroundColor","margin","top","transform","textAlign","display","justifyContent","map","card","cardName"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,OADE;AAEVC,EAAAA,KAAK,EAAE,MAFG;AAGVC,EAAAA,KAAK,EAAE,OAHG;AAIVC,EAAAA,MAAM,EAAE,CAJE;AAKVC,EAAAA,QAAQ,EAAE,UALA;AAMVC,EAAAA,MAAM,EAAE;AANE,CAAd;AAQA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA;;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,KAAlB;;AAD4B,iBAEQd,OAAO,CAAC;AAAA,WAAO;AAC/Ce,MAAAA,MAAM,EAAEd,SAAS,CAACe,IAD6B;AAE/CC,MAAAA,IAAI,EAAE;AAAA,eAAO;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAP;AAAA,OAFyC;AAG/CC,MAAAA,OAAO,EAAE,iBAACC,OAAD;AAAA,eAAc;AACnBC,UAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,EADW;AAEnBC,UAAAA,OAAO,EAAEF,OAAO,CAACE,OAAR;AAFU,SAAd;AAAA;AAHsC,KAAP;AAAA,GAAD,CAFf;AAAA;AAAA;AAAA,MAEnBA,OAFmB,cAEnBA,OAFmB;AAAA,MAEVD,MAFU,cAEVA,MAFU;AAAA,MAEAJ,IAFA;;AAU5B,MAAMM,QAAQ,GAAGD,OAAO,IAAID,MAA5B;AACA,MAAIG,eAAe,GAAG,MAAtB;;AACA,MAAID,QAAJ,EAAc;AACVC,IAAAA,eAAe,GAAG,WAAlB;AACH,GAFD,MAIK,IAAIF,OAAJ,EAAa;AACdE,IAAAA,eAAe,GAAG,WAAlB;AACH;;AAED,SACI;AAAK,IAAA,GAAG,EAAEP,IAAV;AAAgB,IAAA,IAAI,EAAE,OAAtB;AAA+B,IAAA,KAAK,kCAAOd,KAAP;AAAcqB,MAAAA,eAAe,EAAfA;AAAd,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AACRC,MAAAA,MAAM,EAAE,QADA;AAERjB,MAAAA,QAAQ,EAAE,UAFF;AAGRkB,MAAAA,GAAG,EAAE,KAHG;AAIRC,MAAAA,SAAS,EAAE,kBAJH;AAKRC,MAAAA,SAAS,EAAE,QALH;AAMRC,MAAAA,OAAO,EAAE,MAND;AAORC,MAAAA,cAAc,EAAE,QAPR;AAQRzB,MAAAA,KAAK,EAAE;AARC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKM,KAAK,CAACG,KAAN,CAAYiB,GAAZ,CAAgB,UAACC,IAAD;AAAA,WACb;AAAK,MAAA,KAAK,EAAE;AAAEP,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAAgC,MAAA,GAAG,EAAE,UAAQO,IAAI,CAACC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAED,IAAI,CAACC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADa;AAAA,GAAhB,CAVL,CADJ,CADJ;AAqBH,CAzCM;;GAAMvB,K;UAE2BV,O;;;KAF3BU,K;AA2Cb,eAAeA,KAAf","sourcesContent":["import { useDrop } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport CardCard from '../cardCard/CardCard';\r\n\r\nconst style = {\r\n    height: '250px',\r\n    width: '100%',\r\n    color: 'white',\r\n    zIndex: 5,\r\n    position: 'absolute',\r\n    bottom: '150px',\r\n}\r\nexport const Field = (props) => {\r\n    console.log(props.cards)\r\n    const [{ canDrop, isOver }, drop] = useDrop(() => ({\r\n        accept: ItemTypes.CARD,\r\n        drop: () => ({ name: 'Field' }),\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    }));\r\n    const isActive = canDrop && isOver;\r\n    let backgroundColor = '#222';\r\n    if (isActive) {\r\n        backgroundColor = 'darkgreen';\r\n    }\r\n\r\n    else if (canDrop) {\r\n        backgroundColor = 'darkkhaki';\r\n    }\r\n\r\n    return (\r\n        <div ref={drop} role={'Field'} style={{ ...style, backgroundColor }}>\r\n            <div style={{\r\n                margin: '0 auto',\r\n                position: 'absolute',\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n                textAlign: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                width: '100%'\r\n            }}>\r\n                {props.cards.map((card) => (\r\n                    <div style={{ margin: '20px' }} key={'field'+card.cardName}>\r\n                        <CardCard cardName={card.cardName}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Field"]},"metadata":{},"sourceType":"module"}