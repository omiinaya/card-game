{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../models/index');\n\nimport middleware from '../../../middleware/auth';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      nextPage\n    },\n    method,\n    body\n  } = req;\n  const users = await models.users.findAndCountAll();\n  res.statusCode = 200;\n  res.json({\n    status: 'success',\n    data: users.rows,\n    total: users.count\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    username,\n    email,\n    password\n  } = body;\n  const userId = slug;\n  const newUser = await models.users.create({\n    username,\n    email,\n    password,\n    status: 1\n  });\n  return res.status(200).json({\n    status: 'success',\n    message: 'done',\n    data: newUser\n  });\n}) // Put method\n.put(async (req, res) => {\n  res.end('method - put');\n}) // Patch method\n.patch(async (req, res) => {\n  throw new Error('Throws me around! Error can be caught and handled.');\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/pages/api/user/index.js"],"names":["nextConnect","models","require","middleware","handler","use","get","req","res","query","nextPage","method","body","users","findAndCountAll","statusCode","json","status","data","rows","total","count","post","slug","username","email","password","userId","newUser","create","message","put","end","patch","Error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,MAAMC,OAAO,GAAGJ,WAAW,GACzB;AADyB,CAExBK,GAFa,CAETF,UAFS,EAGd;AAHc,CAIbG,GAJa,CAIT,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA,MAFI;AAGJC,IAAAA;AAHI,MAIFL,GAJJ;AAMA,QAAMM,KAAK,GAAG,MAAMZ,MAAM,CAACY,KAAP,CAAaC,eAAb,EAApB;AAEAN,EAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,EAAAA,GAAG,CAACQ,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE,SADD;AAEPC,IAAAA,IAAI,EAAEL,KAAK,CAACM,IAFL;AAGPC,IAAAA,KAAK,EAAEP,KAAK,CAACQ;AAHN,GAAT;AAKD,CAnBa,EAoBd;AApBc,CAqBbC,IArBa,CAqBR,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAM;AAAEI,IAAAA;AAAF,MAAWL,GAAjB;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAWhB,GAAG,CAACE,KAArB;AACA,QAAM;AAAEe,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAgCd,IAAtC;AACA,QAAMe,MAAM,GAAGJ,IAAf;AACA,QAAMK,OAAO,GAAG,MAAM3B,MAAM,CAACY,KAAP,CAAagB,MAAb,CAAoB;AACxCL,IAAAA,QADwC;AAExCC,IAAAA,KAFwC;AAGxCC,IAAAA,QAHwC;AAIxCT,IAAAA,MAAM,EAAE;AAJgC,GAApB,CAAtB;AAMA,SAAOT,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,IAAAA,MAAM,EAAE,SADkB;AAE1Ba,IAAAA,OAAO,EAAE,MAFiB;AAG1BZ,IAAAA,IAAI,EAAEU;AAHoB,GAArB,CAAP;AAKD,CArCa,EAsCd;AAtCc,CAuCbG,GAvCa,CAuCT,OAAOxB,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACwB,GAAJ,CAAQ,cAAR;AACD,CAzCa,EA0Cd;AA1Cc,CA2CbC,KA3Ca,CA2CP,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AACzB,QAAM,IAAI0B,KAAJ,CAAU,oDAAV,CAAN;AACD,CA7Ca,CAAhB;AA+CA,eAAe9B,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nconst models = require('../../../models/index');\nimport middleware from '../../../middleware/auth';\n\nconst handler = nextConnect()\n  // Middleware\n  .use(middleware)\n  // Get method\n  .get(async (req, res) => {\n    const {\n      query: { nextPage },\n      method,\n      body,\n    } = req;\n\n    const users = await models.users.findAndCountAll();\n\n    res.statusCode = 200;\n    res.json({\n      status: 'success',\n      data: users.rows,\n      total: users.count,\n    });\n  })\n  // Post method\n  .post(async (req, res) => {\n    const { body } = req;\n    const { slug } = req.query;\n    const { username, email, password } = body;\n    const userId = slug;\n    const newUser = await models.users.create({\n      username,\n      email,\n      password,\n      status: 1,\n    });\n    return res.status(200).json({\n      status: 'success',\n      message: 'done',\n      data: newUser,\n    });\n  })\n  // Put method\n  .put(async (req, res) => {\n    res.end('method - put');\n  })\n  // Patch method\n  .patch(async (req, res) => {\n    throw new Error('Throws me around! Error can be caught and handled.');\n  });\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}