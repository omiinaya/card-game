{"ast":null,"code":"import jwt from 'jsonwebtoken';\nvar SECRET_KEY = process.env.JWT_KEY;\n/*\n * @params {jwtToken} extracted from cookies\n * @return {object} object of extracted token\n */\n\nexport function verifyToken(jwtToken) {\n  try {\n    return jwt.verify(jwtToken, SECRET_KEY);\n  } catch (e) {\n    console.log('e:', e);\n    return null;\n  }\n}\n/*\n * @params {request} extracted from request response\n * @return {object} object of parse jwt cookie decode object\n */\n\nexport function getAppCookies(req) {\n  var parsedItems = {};\n\n  if (req.headers.cookie) {\n    var cookiesItems = req.headers.cookie.split('; ');\n    cookiesItems.forEach(function (cookies) {\n      var parsedItem = cookies.split('=');\n      parsedItems[parsedItem[0]] = decodeURI(parsedItem[1]);\n    });\n  }\n\n  return parsedItems;\n}\n/*\n * @params {request} extracted from request response, {setLocalhost} your localhost address\n * @return {object} objects of protocol, host and origin\n */\n\nexport function absoluteUrl(req, setLocalhost) {\n  var protocol = 'https:';\n  var host = req ? req.headers['x-forwarded-host'] || req.headers['host'] : window.location.host;\n\n  if (host.indexOf('localhost') > -1) {\n    if (setLocalhost) host = setLocalhost;\n    protocol = 'http:';\n  }\n\n  return {\n    protocol: protocol,\n    host: host,\n    origin: protocol + '//' + host,\n    url: req\n  };\n}","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/middleware/utils.js"],"names":["jwt","SECRET_KEY","process","env","JWT_KEY","verifyToken","jwtToken","verify","e","console","log","getAppCookies","req","parsedItems","headers","cookie","cookiesItems","split","forEach","cookies","parsedItem","decodeURI","absoluteUrl","setLocalhost","protocol","host","window","location","indexOf","origin","url"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AAEA,IAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAA/B;AAEA;;;;;AAIA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AACpC,MAAI;AACF,WAAON,GAAG,CAACO,MAAJ,CAAWD,QAAX,EAAqBL,UAArB,CAAP;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,CAAlB;AACA,WAAO,IAAP;AACD;AACF;AAED;;;;;AAIA,OAAO,SAASG,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAMC,WAAW,GAAG,EAApB;;AACA,MAAID,GAAG,CAACE,OAAJ,CAAYC,MAAhB,EAAwB;AACtB,QAAMC,YAAY,GAAGJ,GAAG,CAACE,OAAJ,CAAYC,MAAZ,CAAmBE,KAAnB,CAAyB,IAAzB,CAArB;AACAD,IAAAA,YAAY,CAACE,OAAb,CAAqB,UAAAC,OAAO,EAAI;AAC9B,UAAMC,UAAU,GAAGD,OAAO,CAACF,KAAR,CAAc,GAAd,CAAnB;AACAJ,MAAAA,WAAW,CAACO,UAAU,CAAC,CAAD,CAAX,CAAX,GAA6BC,SAAS,CAACD,UAAU,CAAC,CAAD,CAAX,CAAtC;AACD,KAHD;AAID;;AACD,SAAOP,WAAP;AACD;AAED;;;;;AAIA,OAAO,SAASS,WAAT,CAAqBV,GAArB,EAA0BW,YAA1B,EAAwC;AAC7C,MAAIC,QAAQ,GAAG,QAAf;AACA,MAAIC,IAAI,GAAGb,GAAG,GACVA,GAAG,CAACE,OAAJ,CAAY,kBAAZ,KAAmCF,GAAG,CAACE,OAAJ,CAAY,MAAZ,CADzB,GAEVY,MAAM,CAACC,QAAP,CAAgBF,IAFpB;;AAGA,MAAIA,IAAI,CAACG,OAAL,CAAa,WAAb,IAA4B,CAAC,CAAjC,EAAoC;AAClC,QAAIL,YAAJ,EAAkBE,IAAI,GAAGF,YAAP;AAClBC,IAAAA,QAAQ,GAAG,OAAX;AACD;;AACD,SAAO;AACLA,IAAAA,QAAQ,EAAEA,QADL;AAELC,IAAAA,IAAI,EAAEA,IAFD;AAGLI,IAAAA,MAAM,EAAEL,QAAQ,GAAG,IAAX,GAAkBC,IAHrB;AAILK,IAAAA,GAAG,EAAElB;AAJA,GAAP;AAMD","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst SECRET_KEY = process.env.JWT_KEY;\n\n/*\n * @params {jwtToken} extracted from cookies\n * @return {object} object of extracted token\n */\nexport function verifyToken(jwtToken) {\n  try {\n    return jwt.verify(jwtToken, SECRET_KEY);\n  } catch (e) {\n    console.log('e:', e);\n    return null;\n  }\n}\n\n/*\n * @params {request} extracted from request response\n * @return {object} object of parse jwt cookie decode object\n */\nexport function getAppCookies(req) {\n  const parsedItems = {};\n  if (req.headers.cookie) {\n    const cookiesItems = req.headers.cookie.split('; ');\n    cookiesItems.forEach(cookies => {\n      const parsedItem = cookies.split('=');\n      parsedItems[parsedItem[0]] = decodeURI(parsedItem[1]);\n    });\n  }\n  return parsedItems;\n}\n\n/*\n * @params {request} extracted from request response, {setLocalhost} your localhost address\n * @return {object} objects of protocol, host and origin\n */\nexport function absoluteUrl(req, setLocalhost) {\n  var protocol = 'https:';\n  var host = req\n    ? req.headers['x-forwarded-host'] || req.headers['host']\n    : window.location.host;\n  if (host.indexOf('localhost') > -1) {\n    if (setLocalhost) host = setLocalhost;\n    protocol = 'http:';\n  }\n  return {\n    protocol: protocol,\n    host: host,\n    origin: protocol + '//' + host,\n    url: req,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}