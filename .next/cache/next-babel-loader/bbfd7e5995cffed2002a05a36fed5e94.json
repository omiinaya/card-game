{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nfernal\\\\Desktop\\\\nextjs-sequelize\\\\components\\\\board\\\\PlayerHand.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { memo } from 'react';\nimport { Board } from './Board';\nimport { Box } from './Box';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nconst PlayerHand = memo(function Container() {\n  const {\n    0: cards,\n    1: setCards\n  } = useState([]);\n\n  const getCards = () => {\n    if (cards.length === 0) {\n      axios.get(`/api/card`).then(res => {\n        setCards(res.data.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCards();\n  }, []);\n  useEffect(() => {\n    console.log(cards);\n    cards.map((obj, index) => _objectSpread(_objectSpread({}, obj), {}, {\n      id: index\n    }));\n  }, [cards]);\n\n  const handleCardPlayed = x => {\n    //cards.splice(index, 1)\n    console.log(x);\n    var favorites = cards.filter(card => card.id != x);\n    console.log(favorites);\n    setCards(favorites);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      overflow: 'hidden',\n      clear: 'both'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, cards.map((card, index) => __jsx(\"div\", {\n    key: card.cardName + index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: \"generated-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    id: card.id,\n    cardName: card.cardName,\n    cardImage: card.cardImage,\n    cardRarity: card.cardRarity,\n    cardType: card.cardType,\n    typeImage: card.typeImage,\n    cardDesc: card.cardDesc,\n    cardMonster: card.cardMonster,\n    cardAtk: card.cardATK,\n    cardDef: card.cardDEF,\n    playCard: handleCardPlayed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }))))));\n});\nexport default PlayerHand;","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/components/board/PlayerHand.jsx"],"names":["memo","Board","Box","axios","useEffect","useState","PlayerHand","Container","cards","setCards","getCards","length","get","then","res","data","console","log","map","obj","index","id","handleCardPlayed","x","favorites","filter","card","overflow","clear","cardName","cardImage","cardRarity","cardType","typeImage","cardDesc","cardMonster","cardATK","cardDEF"],"mappings":"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","sourcesContent":["import { memo } from 'react';\r\nimport { Board } from './Board';\r\nimport { Box } from './Box';\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst PlayerHand = memo(function Container() {\r\n\r\n    const [cards, setCards] = useState([]);\r\n\r\n    const getCards = () => {\r\n        if (cards.length === 0) {\r\n            axios.get(`/api/card`).then((res) => {\r\n                setCards(res.data.data);\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getCards();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(cards);\r\n        cards.map((obj, index) => ({ ...obj, id: index}))\r\n    }, [cards]);\r\n\r\n    const handleCardPlayed = (x) => {\r\n        //cards.splice(index, 1)\r\n        console.log(x)\r\n        var favorites = cards.filter((card) => card.id != x)\r\n        console.log(favorites)\r\n        setCards(favorites)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ overflow: 'hidden', clear: 'both' }}>\r\n                <Board />\r\n            </div>\r\n            <div className=\"cards\">\r\n                {cards.map((card, index) => (\r\n                    <div key={card.cardName + index}>\r\n                        <div className=\"generated-card\">\r\n                            <Box\r\n                                id={card.id}\r\n                                cardName={card.cardName}\r\n                                cardImage={card.cardImage}\r\n                                cardRarity={card.cardRarity}\r\n                                cardType={card.cardType}\r\n                                typeImage={card.typeImage}\r\n                                cardDesc={card.cardDesc}\r\n                                cardMonster={card.cardMonster}\r\n                                cardAtk={card.cardATK}\r\n                                cardDef={card.cardDEF}\r\n                                playCard={handleCardPlayed}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default PlayerHand"]},"metadata":{},"sourceType":"module"}