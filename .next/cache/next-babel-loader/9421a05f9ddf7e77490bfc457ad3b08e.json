{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Nfernal\\\\Desktop\\\\nextjs-sequelize\\\\components\\\\game\\\\Card.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useDrag } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport ActualCard from '../cardCard/ActualCard';\nvar style = {\n  border: '1px dashed gray',\n  cursor: 'move',\n  zIndex: 10\n};\nexport var Card = function Card(_ref) {\n  _s();\n\n  var id = _ref.id,\n      cardName = _ref.cardName,\n      cardImage = _ref.cardImage,\n      cardRarity = _ref.cardRarity,\n      cardType = _ref.cardType,\n      cardMonster = _ref.cardMonster,\n      cardDesc = _ref.cardDesc,\n      typeImage = _ref.typeImage,\n      cardAtk = _ref.cardAtk,\n      cardDef = _ref.cardDef,\n      playCard = _ref.playCard;\n\n  var _useDrag = useDrag(function () {\n    return {\n      type: ItemTypes.CARD,\n      item: {\n        id: id,\n        cardName: cardName\n      },\n      end: function end(item, monitor) {\n        var dropResult = monitor.getDropResult();\n\n        if (item && dropResult) {\n          playCard(item.id);\n          console.log(\"You dropped \".concat(item.cardName, \" into \").concat(dropResult.name, \"!\"));\n        }\n      },\n      collect: function collect(monitor) {\n        return {\n          isDragging: monitor.isDragging(),\n          handlerId: monitor.getHandlerId()\n        };\n      }\n    };\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 2),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1];\n\n  var opacity = isDragging ? 0.4 : 1;\n  return __jsx(\"div\", {\n    ref: drag,\n    role: \"Card\",\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      opacity: opacity\n    }),\n    \"data-testid\": \"card-\".concat(cardName),\n    onClick: function onClick() {\n      console.log(id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(ActualCard, {\n    id: id,\n    cardName: cardName,\n    cardImage: cardImage,\n    cardRarity: cardRarity,\n    cardType: cardType,\n    cardMonster: cardMonster,\n    cardDesc: cardDesc,\n    typeImage: typeImage,\n    cardAtk: cardAtk,\n    cardDef: cardDef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(Card, \"wuumsFp4qAni9XRJfRhQAZjuD/k=\", false, function () {\n  return [useDrag];\n});\n\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/components/game/Card.jsx"],"names":["useDrag","ItemTypes","ActualCard","style","border","cursor","zIndex","Card","id","cardName","cardImage","cardRarity","cardType","cardMonster","cardDesc","typeImage","cardAtk","cardDef","playCard","type","CARD","item","end","monitor","dropResult","getDropResult","console","log","name","collect","isDragging","handlerId","getHandlerId","drag","opacity"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,IAAMC,KAAK,GAAG;AAEVC,EAAAA,MAAM,EAAE,iBAFE;AAGVC,EAAAA,MAAM,EAAE,MAHE;AAIVC,EAAAA,MAAM,EAAE;AAJE,CAAd;AAMA,OAAO,IAAMC,IAAI,GAAG,SAASA,IAAT,OAYjB;AAAA;;AAAA,MAXCC,EAWD,QAXCA,EAWD;AAAA,MAVCC,QAUD,QAVCA,QAUD;AAAA,MATCC,SASD,QATCA,SASD;AAAA,MARCC,UAQD,QARCA,UAQD;AAAA,MAPCC,QAOD,QAPCA,QAOD;AAAA,MANCC,WAMD,QANCA,WAMD;AAAA,MALCC,QAKD,QALCA,QAKD;AAAA,MAJCC,SAID,QAJCA,SAID;AAAA,MAHCC,OAGD,QAHCA,OAGD;AAAA,MAFCC,OAED,QAFCA,OAED;AAAA,MADCC,QACD,QADCA,QACD;;AAAA,iBACgClB,OAAO,CAAC;AAAA,WAAO;AAC1CmB,MAAAA,IAAI,EAAElB,SAAS,CAACmB,IAD0B;AAE1CC,MAAAA,IAAI,EAAE;AAAEb,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,QAAQ,EAARA;AAAN,OAFoC;AAG1Ca,MAAAA,GAAG,EAAE,aAACD,IAAD,EAAOE,OAAP,EAAmB;AACpB,YAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;;AACA,YAAIJ,IAAI,IAAIG,UAAZ,EAAwB;AACpBN,UAAAA,QAAQ,CAACG,IAAI,CAACb,EAAN,CAAR;AACAkB,UAAAA,OAAO,CAACC,GAAR,uBAA2BN,IAAI,CAACZ,QAAhC,mBAAiDe,UAAU,CAACI,IAA5D;AACH;AACJ,OATyC;AAU1CC,MAAAA,OAAO,EAAE,iBAACN,OAAD;AAAA,eAAc;AACnBO,UAAAA,UAAU,EAAEP,OAAO,CAACO,UAAR,EADO;AAEnBC,UAAAA,SAAS,EAAER,OAAO,CAACS,YAAR;AAFQ,SAAd;AAAA;AAViC,KAAP;AAAA,GAAD,CADvC;AAAA;AAAA,MACUF,UADV,gBACUA,UADV;AAAA,MACwBG,IADxB;;AAgBC,MAAMC,OAAO,GAAGJ,UAAU,GAAG,GAAH,GAAS,CAAnC;AACA,SACI;AAAK,IAAA,GAAG,EAAEG,IAAV;AAAgB,IAAA,IAAI,EAAC,MAArB;AAA4B,IAAA,KAAK,kCAAO9B,KAAP;AAAc+B,MAAAA,OAAO,EAAPA;AAAd,MAAjC;AAA0D,kCAAqBzB,QAArB,CAA1D;AAA2F,IAAA,OAAO,EAAE,mBAAM;AAAEiB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,EAAZ;AAAiB,KAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AACI,IAAA,EAAE,EAAEA,EADR;AAEI,IAAA,QAAQ,EAAEC,QAFd;AAGI,IAAA,SAAS,EAAEC,SAHf;AAII,IAAA,UAAU,EAAEC,UAJhB;AAKI,IAAA,QAAQ,EAAEC,QALd;AAMI,IAAA,WAAW,EAAEC,WANjB;AAOI,IAAA,QAAQ,EAAEC,QAPd;AAQI,IAAA,SAAS,EAAEC,SARf;AASI,IAAA,OAAO,EAAEC,OATb;AAUI,IAAA,OAAO,EAAEC,OAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAgBH,CA7CM;;GAAMV,I;UAasBP,O;;;KAbtBO,I","sourcesContent":["import { useDrag } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport ActualCard from '../cardCard/ActualCard';\r\n\r\nconst style = {\r\n\r\n    border: '1px dashed gray',\r\n    cursor: 'move',\r\n    zIndex: 10\r\n};\r\nexport const Card = function Card({\r\n    id,\r\n    cardName,\r\n    cardImage,\r\n    cardRarity,\r\n    cardType,\r\n    cardMonster,\r\n    cardDesc,\r\n    typeImage,\r\n    cardAtk,\r\n    cardDef,\r\n    playCard\r\n}) {\r\n    const [{ isDragging }, drag] = useDrag(() => ({\r\n        type: ItemTypes.CARD,\r\n        item: { id, cardName },\r\n        end: (item, monitor) => {\r\n            const dropResult = monitor.getDropResult();\r\n            if (item && dropResult) {\r\n                playCard(item.id)\r\n                console.log(`You dropped ${item.cardName} into ${dropResult.name}!`);\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n            handlerId: monitor.getHandlerId(),\r\n        }),\r\n    }));\r\n    const opacity = isDragging ? 0.4 : 1;\r\n    return (\r\n        <div ref={drag} role=\"Card\" style={{ ...style, opacity }} data-testid={`card-${cardName}`} onClick={() => { console.log(id) }}>\r\n            <ActualCard\r\n                id={id}\r\n                cardName={cardName}\r\n                cardImage={cardImage}\r\n                cardRarity={cardRarity}\r\n                cardType={cardType}\r\n                cardMonster={cardMonster}\r\n                cardDesc={cardDesc}\r\n                typeImage={typeImage}\r\n                cardAtk={cardAtk}\r\n                cardDef={cardDef}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}