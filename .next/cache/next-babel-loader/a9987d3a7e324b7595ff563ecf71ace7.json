{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mr.X\\\\Desktop\\\\nextjs-sequelize\\\\pages\\\\job\\\\[slug].js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n/* utils */\n\nimport { absoluteUrl, getAppCookies } from '../../middleware/utils';\n/* components */\n\nimport Layout from '../../components/layout/Layout';\nimport FormJob from '../../components/form/FormJob';\n/* post schemas */\n\nconst FORM_DATA_JOB = {\n  title: {\n    value: '',\n    label: 'Title',\n    min: 10,\n    max: 36,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Title'\n    }\n  },\n  content: {\n    value: '',\n    label: 'Content',\n    min: 6,\n    max: 1500,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Content'\n    }\n  },\n  reportManager: {\n    value: '',\n    label: 'Content',\n    min: 6,\n    max: 1500,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Report Manager'\n    }\n  },\n  dateLimit: {\n    value: '',\n    label: 'Date',\n    min: 6,\n    max: 24,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Date limit'\n    }\n  }\n};\n\nfunction Job(props) {\n  const router = useRouter();\n  const {\n    origin,\n    job,\n    token\n  } = props;\n  const {\n    baseApiUrl\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: stateFormData,\n    1: setStateFormData\n  } = useState(FORM_DATA_JOB);\n  const {\n    0: stateFormError,\n    1: setStateFormError\n  } = useState([]);\n  const {\n    0: stateFormMessage,\n    1: setStateFormMessage\n  } = useState({});\n  const {\n    0: stateFormValid,\n    1: setStateFormValid\n  } = useState(false);\n\n  async function onSubmitHandler(e) {\n    e.preventDefault();\n\n    let data = _objectSpread({}, stateFormData);\n    /* title */\n\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      title: data.title.value || ''\n    });\n    /* content */\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      content: data.content.value || ''\n    });\n    /* reportManager */\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      reportManager: data.reportManager.value || ''\n    });\n    /* dateLimit */\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      dateLimit: data.dateLimit.value || ''\n    });\n    /* validation handler */\n\n    const isValid = validationHandler(stateFormData);\n\n    if (isValid) {\n      // Call an external API endpoint to get posts.\n      // You can use any data fetching library\n      setLoading(!loading);\n      const jobApi = await fetch(`${baseApiUrl}/job/[slug]`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          authorization: token || ''\n        },\n        body: JSON.stringify(data)\n      });\n      let result = await jobApi.json();\n\n      if (result.status === 'success' && result.message && result.message === 'done' && result.data) {\n        router.push({\n          pathname: result.data.slug ? `/job/${result.data.slug}` : '/job'\n        });\n      } else {\n        setStateFormMessage(result);\n      }\n\n      setLoading(false);\n    }\n  }\n\n  function onChangeHandler(e) {\n    const {\n      name,\n      value\n    } = e.currentTarget;\n    setStateFormData(_objectSpread(_objectSpread({}, stateFormData), {}, {\n      [name]: _objectSpread(_objectSpread({}, stateFormData[name]), {}, {\n        value\n      })\n    }));\n    /* validation handler */\n\n    validationHandler(stateFormData, e);\n  }\n\n  function validationHandler(states, e) {\n    const input = e && e.target.name || '';\n    const errors = [];\n    let isValid = true;\n\n    if (input) {\n      if (states[input].required) {\n        if (!states[input].value) {\n          errors[input] = {\n            hint: `${states[e.target.name].label} required`,\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n\n      if (states[input].value && states[input].min > states[input].value.length) {\n        errors[input] = {\n          hint: `Field ${states[input].label} min ${states[input].min}`,\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].value && states[input].max < states[input].value.length) {\n        errors[input] = {\n          hint: `Field ${states[input].label} max ${states[input].max}`,\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].validator !== null && typeof states[input].validator === 'object') {\n        if (states[input].value && !states[input].validator.regEx.test(states[input].value)) {\n          errors[input] = {\n            hint: states[input].validator.error,\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n    } else {\n      Object.entries(states).forEach(item => {\n        item.forEach(field => {\n          errors[item[0]] = '';\n\n          if (field.required) {\n            if (!field.value) {\n              errors[item[0]] = {\n                hint: `${field.label} required`,\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n\n          if (field.value && field.min >= field.value.length) {\n            errors[item[0]] = {\n              hint: `Field ${field.label} min ${field.min}`,\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.value && field.max <= field.value.length) {\n            errors[item[0]] = {\n              hint: `Field ${field.label} max ${field.max}`,\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.validator !== null && typeof field.validator === 'object') {\n            if (field.value && !field.validator.regEx.test(field.value)) {\n              errors[item[0]] = {\n                hint: field.validator.error,\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n        });\n      });\n    }\n\n    if (isValid) {\n      setStateFormValid(isValid);\n    }\n\n    setStateFormError(_objectSpread({}, errors));\n    return isValid;\n  }\n\n  function renderJobForm() {\n    return __jsx(React.Fragment, null, __jsx(Link, {\n      href: {\n        pathname: '/job'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }, \"\\u2190 Back\")), __jsx(FormJob, {\n      onSubmit: onSubmitHandler,\n      onChange: onChangeHandler,\n      loading: loading,\n      stateFormData: stateFormData,\n      stateFormError: stateFormError,\n      stateFormValid: stateFormValid,\n      stateFormMessage: stateFormMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  function renderJobList() {\n    return __jsx(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 7\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: '/job'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, \"\\u2190 Back\")), __jsx(\"h2\", {\n      className: \"sub-title\",\n      style: {\n        display: 'block',\n        marginTop: '.75rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }\n    }, job.data.title, __jsx(\"small\", {\n      style: {\n        display: 'block',\n        fontWeight: 'normal',\n        marginTop: '.75rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, \"Posted: \", job.data.createdAt)), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, job.data.content), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }, \"Email: \", job.data.emailTo), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }\n    }, \"Report to: \", job.data.reportManager), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, \"Limit :\", job.data.dateLimit), __jsx(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }), \"By: \", job.data.user.firstName || '', \" \", job.data.user.lastName || '');\n  }\n\n  return __jsx(Layout, {\n    title: `Next.js with Sequelize | Job Page - ${job.data && job.data.title}`,\n    url: `${origin}${router.asPath}`,\n    origin: origin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }, __jsx(\"main\", {\n    className: \"content-detail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, router.asPath === '/job/add' ? renderJobForm() : renderJobList())));\n}\n/* getServerSideProps */\n\n\nexport async function getServerSideProps(context) {\n  const {\n    query,\n    req\n  } = context;\n  const {\n    origin\n  } = absoluteUrl(req);\n  const token = getAppCookies(req).token || '';\n  const baseApiUrl = `${origin}/api`;\n  let job = {};\n\n  if (query.slug !== 'add') {\n    const jobApi = await fetch(`${baseApiUrl}/job/${query.slug}`);\n    job = await jobApi.json();\n  }\n\n  return {\n    props: {\n      origin,\n      baseApiUrl,\n      job,\n      token\n    }\n  };\n}\nexport default Job;","map":{"version":3,"sources":["C:/Users/Mr.X/Desktop/nextjs-sequelize/pages/job/[slug].js"],"names":["React","useState","useEffect","Link","useRouter","absoluteUrl","getAppCookies","Layout","FormJob","FORM_DATA_JOB","title","value","label","min","max","required","validator","regEx","error","content","reportManager","dateLimit","Job","props","router","origin","job","token","baseApiUrl","loading","setLoading","stateFormData","setStateFormData","stateFormError","setStateFormError","stateFormMessage","setStateFormMessage","stateFormValid","setStateFormValid","onSubmitHandler","e","preventDefault","data","isValid","validationHandler","jobApi","fetch","method","headers","Accept","authorization","body","JSON","stringify","result","json","status","message","push","pathname","slug","onChangeHandler","name","currentTarget","states","input","target","errors","hint","isInvalid","length","test","Object","entries","forEach","item","field","renderJobForm","renderJobList","display","marginTop","fontWeight","createdAt","emailTo","user","firstName","lastName","asPath","getServerSideProps","context","query","req"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { useRouter } from 'next/router';\r\n\r\n/* utils */\r\nimport { absoluteUrl, getAppCookies } from '../../middleware/utils';\r\n\r\n/* components */\r\nimport Layout from '../../components/layout/Layout';\r\nimport FormJob from '../../components/form/FormJob';\r\n\r\n/* post schemas */\r\nconst FORM_DATA_JOB = {\r\n  title: {\r\n    value: '',\r\n    label: 'Title',\r\n    min: 10,\r\n    max: 36,\r\n    required: true,\r\n    validator: {\r\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\r\n      error: 'Please insert valid Title',\r\n    },\r\n  },\r\n  content: {\r\n    value: '',\r\n    label: 'Content',\r\n    min: 6,\r\n    max: 1500,\r\n    required: true,\r\n    validator: {\r\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\r\n      error: 'Please insert valid Content',\r\n    },\r\n  },\r\n  reportManager: {\r\n    value: '',\r\n    label: 'Content',\r\n    min: 6,\r\n    max: 1500,\r\n    required: true,\r\n    validator: {\r\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\r\n      error: 'Please insert valid Report Manager',\r\n    },\r\n  },\r\n  dateLimit: {\r\n    value: '',\r\n    label: 'Date',\r\n    min: 6,\r\n    max: 24,\r\n    required: true,\r\n    validator: {\r\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\r\n      error: 'Please insert valid Date limit',\r\n    },\r\n  },\r\n};\r\n\r\nfunction Job(props) {\r\n  const router = useRouter();\r\n\r\n  const { origin, job, token } = props;\r\n\r\n  const { baseApiUrl } = props;\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [stateFormData, setStateFormData] = useState(FORM_DATA_JOB);\r\n  const [stateFormError, setStateFormError] = useState([]);\r\n  const [stateFormMessage, setStateFormMessage] = useState({});\r\n  const [stateFormValid, setStateFormValid] = useState(false);\r\n\r\n  async function onSubmitHandler(e) {\r\n    e.preventDefault();\r\n\r\n    let data = { ...stateFormData };\r\n\r\n    /* title */\r\n    data = { ...data, title: data.title.value || '' };\r\n    /* content */\r\n    data = { ...data, content: data.content.value || '' };\r\n    /* reportManager */\r\n    data = { ...data, reportManager: data.reportManager.value || '' };\r\n    /* dateLimit */\r\n    data = { ...data, dateLimit: data.dateLimit.value || '' };\r\n\r\n    /* validation handler */\r\n    const isValid = validationHandler(stateFormData);\r\n\r\n    if (isValid) {\r\n      // Call an external API endpoint to get posts.\r\n      // You can use any data fetching library\r\n      setLoading(!loading);\r\n      const jobApi = await fetch(`${baseApiUrl}/job/[slug]`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          authorization: token || '',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      let result = await jobApi.json();\r\n      if (\r\n        result.status === 'success' &&\r\n        result.message &&\r\n        result.message === 'done' &&\r\n        result.data\r\n      ) {\r\n        router.push({\r\n          pathname: result.data.slug ? `/job/${result.data.slug}` : '/job',\r\n        });\r\n      } else {\r\n        setStateFormMessage(result);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  function onChangeHandler(e) {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    setStateFormData({\r\n      ...stateFormData,\r\n      [name]: {\r\n        ...stateFormData[name],\r\n        value,\r\n      },\r\n    });\r\n\r\n    /* validation handler */\r\n    validationHandler(stateFormData, e);\r\n  }\r\n\r\n  function validationHandler(states, e) {\r\n    const input = (e && e.target.name) || '';\r\n    const errors = [];\r\n    let isValid = true;\r\n\r\n    if (input) {\r\n      if (states[input].required) {\r\n        if (!states[input].value) {\r\n          errors[input] = {\r\n            hint: `${states[e.target.name].label} required`,\r\n            isInvalid: true,\r\n          };\r\n          isValid = false;\r\n        }\r\n      }\r\n      if (\r\n        states[input].value &&\r\n        states[input].min > states[input].value.length\r\n      ) {\r\n        errors[input] = {\r\n          hint: `Field ${states[input].label} min ${states[input].min}`,\r\n          isInvalid: true,\r\n        };\r\n        isValid = false;\r\n      }\r\n      if (\r\n        states[input].value &&\r\n        states[input].max < states[input].value.length\r\n      ) {\r\n        errors[input] = {\r\n          hint: `Field ${states[input].label} max ${states[input].max}`,\r\n          isInvalid: true,\r\n        };\r\n        isValid = false;\r\n      }\r\n      if (\r\n        states[input].validator !== null &&\r\n        typeof states[input].validator === 'object'\r\n      ) {\r\n        if (\r\n          states[input].value &&\r\n          !states[input].validator.regEx.test(states[input].value)\r\n        ) {\r\n          errors[input] = {\r\n            hint: states[input].validator.error,\r\n            isInvalid: true,\r\n          };\r\n          isValid = false;\r\n        }\r\n      }\r\n    } else {\r\n      Object.entries(states).forEach(item => {\r\n        item.forEach(field => {\r\n          errors[item[0]] = '';\r\n          if (field.required) {\r\n            if (!field.value) {\r\n              errors[item[0]] = {\r\n                hint: `${field.label} required`,\r\n                isInvalid: true,\r\n              };\r\n              isValid = false;\r\n            }\r\n          }\r\n          if (field.value && field.min >= field.value.length) {\r\n            errors[item[0]] = {\r\n              hint: `Field ${field.label} min ${field.min}`,\r\n              isInvalid: true,\r\n            };\r\n            isValid = false;\r\n          }\r\n          if (field.value && field.max <= field.value.length) {\r\n            errors[item[0]] = {\r\n              hint: `Field ${field.label} max ${field.max}`,\r\n              isInvalid: true,\r\n            };\r\n            isValid = false;\r\n          }\r\n          if (field.validator !== null && typeof field.validator === 'object') {\r\n            if (field.value && !field.validator.regEx.test(field.value)) {\r\n              errors[item[0]] = {\r\n                hint: field.validator.error,\r\n                isInvalid: true,\r\n              };\r\n              isValid = false;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    if (isValid) {\r\n      setStateFormValid(isValid);\r\n    }\r\n    setStateFormError({\r\n      ...errors,\r\n    });\r\n    return isValid;\r\n  }\r\n\r\n  function renderJobForm() {\r\n    return (\r\n      <>\r\n        <Link\r\n          href={{\r\n            pathname: '/job',\r\n          }}\r\n        >\r\n          <a>&larr; Back</a>\r\n        </Link>\r\n        <FormJob\r\n          onSubmit={onSubmitHandler}\r\n          onChange={onChangeHandler}\r\n          loading={loading}\r\n          stateFormData={stateFormData}\r\n          stateFormError={stateFormError}\r\n          stateFormValid={stateFormValid}\r\n          stateFormMessage={stateFormMessage}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderJobList() {\r\n    return (\r\n      <div className=\"card\">\r\n        <Link\r\n          href={{\r\n            pathname: '/job',\r\n          }}\r\n        >\r\n          <a>&larr; Back</a>\r\n        </Link>\r\n        <h2\r\n          className=\"sub-title\"\r\n          style={{\r\n            display: 'block',\r\n            marginTop: '.75rem',\r\n          }}\r\n        >\r\n          {job.data.title}\r\n          <small\r\n            style={{\r\n              display: 'block',\r\n              fontWeight: 'normal',\r\n              marginTop: '.75rem',\r\n            }}\r\n          >\r\n            Posted: {job.data.createdAt}\r\n          </small>\r\n        </h2>\r\n        <p>{job.data.content}</p>\r\n        <p>Email: {job.data.emailTo}</p>\r\n        <p>Report to: {job.data.reportManager}</p>\r\n        <p>Limit :{job.data.dateLimit}</p>\r\n        <hr />\r\n        By: {job.data.user.firstName || ''} {job.data.user.lastName || ''}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout\r\n      title={`Next.js with Sequelize | Job Page - ${job.data &&\r\n        job.data.title}`}\r\n      url={`${origin}${router.asPath}`}\r\n      origin={origin}\r\n    >\r\n      <div className=\"container\">\r\n        <main className=\"content-detail\">\r\n          {router.asPath === '/job/add' ? renderJobForm() : renderJobList()}\r\n        </main>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\n/* getServerSideProps */\r\nexport async function getServerSideProps(context) {\r\n  const { query, req } = context;\r\n  const { origin } = absoluteUrl(req);\r\n\r\n  const token = getAppCookies(req).token || '';\r\n  const baseApiUrl = `${origin}/api`;\r\n\r\n  let job = {};\r\n\r\n  if (query.slug !== 'add') {\r\n    const jobApi = await fetch(`${baseApiUrl}/job/${query.slug}`);\r\n    job = await jobApi.json();\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      origin,\r\n      baseApiUrl,\r\n      job,\r\n      token,\r\n    },\r\n  };\r\n}\r\n\r\nexport default Job;\r\n"]},"metadata":{},"sourceType":"module"}