{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nfernal\\\\Desktop\\\\nextjs-sequelize\\\\components\\\\game\\\\Field.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport CardCard from '../cardCard/CardCard';\nconst style = {\n  height: '280px',\n  width: '100%',\n  zIndex: 5,\n  position: 'absolute',\n  bottom: '255px'\n};\nexport const Field = props => {\n  const [{\n    canDrop,\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: () => ({\n      name: 'Field'\n    }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }));\n  const isActive = canDrop && isOver;\n  let backgroundColor = '#222';\n\n  if (isActive) {\n    backgroundColor = 'darkgreen';\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki';\n  }\n\n  return __jsx(\"div\", {\n    ref: drop,\n    role: 'Field',\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      backgroundColor\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      margin: '0 auto',\n      position: 'absolute',\n      top: '50%',\n      transform: 'translateY(-50%)',\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%',\n      height: '257px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, props.cards.map(card => __jsx(\"div\", {\n    key: 'field' + card.cardName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: \"generated-field-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, __jsx(CardCard, {\n    id: card.id,\n    cardName: card.cardName,\n    cardImage: card.cardImage,\n    cardRarity: card.cardRarity,\n    cardType: card.cardType,\n    typeImage: card.typeImage,\n    cardDesc: card.cardDesc,\n    cardSubType: card.cardSubType,\n    cardAtk: card.cardATK,\n    cardDef: card.cardDEF,\n    playCard: props.playCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }))))));\n};\nexport default Field;","map":{"version":3,"sources":["C:/Users/Nfernal/Desktop/nextjs-sequelize/components/game/Field.jsx"],"names":["useDrop","ItemTypes","CardCard","style","height","width","zIndex","position","bottom","Field","props","canDrop","isOver","drop","accept","CARD","name","collect","monitor","isActive","backgroundColor","margin","top","transform","display","justifyContent","cards","map","card","cardName","id","cardImage","cardRarity","cardType","typeImage","cardDesc","cardSubType","cardATK","cardDEF","playCard"],"mappings":";;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,OADE;AAEVC,EAAAA,KAAK,EAAE,MAFG;AAGVC,EAAAA,MAAM,EAAE,CAHE;AAIVC,EAAAA,QAAQ,EAAE,UAJA;AAKVC,EAAAA,MAAM,EAAE;AALE,CAAd;AAOA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAsBC,IAAtB,IAA8Bb,OAAO,CAAC,OAAO;AAC/Cc,IAAAA,MAAM,EAAEb,SAAS,CAACc,IAD6B;AAE/CF,IAAAA,IAAI,EAAE,OAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP,CAFyC;AAG/CC,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACnBN,MAAAA,MAAM,EAAEM,OAAO,CAACN,MAAR,EADW;AAEnBD,MAAAA,OAAO,EAAEO,OAAO,CAACP,OAAR;AAFU,KAAd;AAHsC,GAAP,CAAD,CAA3C;AASA,QAAMQ,QAAQ,GAAGR,OAAO,IAAIC,MAA5B;AACA,MAAIQ,eAAe,GAAG,MAAtB;;AAEA,MAAID,QAAJ,EAAc;AACVC,IAAAA,eAAe,GAAG,WAAlB;AACH,GAFD,MAIK,IAAIT,OAAJ,EAAa;AACdS,IAAAA,eAAe,GAAG,WAAlB;AACH;;AAED,SACI;AAAK,IAAA,GAAG,EAAEP,IAAV;AAAgB,IAAA,IAAI,EAAE,OAAtB;AAA+B,IAAA,KAAK,kCAAOV,KAAP;AAAciB,MAAAA;AAAd,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AACRC,MAAAA,MAAM,EAAE,QADA;AAERd,MAAAA,QAAQ,EAAE,UAFF;AAGRe,MAAAA,GAAG,EAAE,KAHG;AAIRC,MAAAA,SAAS,EAAE,kBAJH;AAKRC,MAAAA,OAAO,EAAE,MALD;AAMRC,MAAAA,cAAc,EAAE,QANR;AAORpB,MAAAA,KAAK,EAAE,MAPC;AAQRD,MAAAA,MAAM,EAAE;AARA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKM,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,IACb;AAAK,IAAA,GAAG,EAAE,UAAUA,IAAI,CAACC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AACI,IAAA,EAAE,EAAED,IAAI,CAACE,EADb;AAEI,IAAA,QAAQ,EAAEF,IAAI,CAACC,QAFnB;AAGI,IAAA,SAAS,EAAED,IAAI,CAACG,SAHpB;AAII,IAAA,UAAU,EAAEH,IAAI,CAACI,UAJrB;AAKI,IAAA,QAAQ,EAAEJ,IAAI,CAACK,QALnB;AAMI,IAAA,SAAS,EAAEL,IAAI,CAACM,SANpB;AAOI,IAAA,QAAQ,EAAEN,IAAI,CAACO,QAPnB;AAQI,IAAA,WAAW,EAAEP,IAAI,CAACQ,WARtB;AASI,IAAA,OAAO,EAAER,IAAI,CAACS,OATlB;AAUI,IAAA,OAAO,EAAET,IAAI,CAACU,OAVlB;AAWI,IAAA,QAAQ,EAAE5B,KAAK,CAAC6B,QAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADH,CAVL,CADJ,CADJ;AAkCH,CAvDM;AAyDP,eAAe9B,KAAf","sourcesContent":["import { useDrop } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport CardCard from '../cardCard/CardCard';\r\n\r\nconst style = {\r\n    height: '280px',\r\n    width: '100%',\r\n    zIndex: 5,\r\n    position: 'absolute',\r\n    bottom: '255px',\r\n}\r\nexport const Field = (props) => {\r\n    const [{ canDrop, isOver }, drop] = useDrop(() => ({\r\n        accept: ItemTypes.CARD,\r\n        drop: () => ({ name: 'Field' }),\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    }));\r\n\r\n    const isActive = canDrop && isOver;\r\n    let backgroundColor = '#222';\r\n\r\n    if (isActive) {\r\n        backgroundColor = 'darkgreen';\r\n    }\r\n\r\n    else if (canDrop) {\r\n        backgroundColor = 'darkkhaki';\r\n    }\r\n\r\n    return (\r\n        <div ref={drop} role={'Field'} style={{ ...style, backgroundColor }}>\r\n            <div style={{\r\n                margin: '0 auto',\r\n                position: 'absolute',\r\n                top: '50%',\r\n                transform: 'translateY(-50%)',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                width: '100%',\r\n                height: '257px'\r\n            }}>\r\n                {props.cards.map((card) => (\r\n                    <div key={'field' + card.cardName}>\r\n                        <div className=\"generated-field-card\">\r\n                            <CardCard\r\n                                id={card.id}\r\n                                cardName={card.cardName}\r\n                                cardImage={card.cardImage}\r\n                                cardRarity={card.cardRarity}\r\n                                cardType={card.cardType}\r\n                                typeImage={card.typeImage}\r\n                                cardDesc={card.cardDesc}\r\n                                cardSubType={card.cardSubType}\r\n                                cardAtk={card.cardATK}\r\n                                cardDef={card.cardDEF}\r\n                                playCard={props.playCard}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Field"]},"metadata":{},"sourceType":"module"}