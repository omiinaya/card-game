{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '../../../middleware/auth';\n\nconst models = require('../../../db/models/index');\n\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      slug\n    },\n    method,\n    body\n  } = req;\n  const job = await models.jobs.findOne({\n    where: {\n      slug: slug\n    },\n    include: [{\n      model: models.users,\n      as: 'user'\n    }]\n  });\n  res.statusCode = 200;\n  return res.json({\n    status: 'success',\n    data: job\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    query: {\n      id,\n      name\n    },\n    method,\n    body\n  } = req;\n  const {\n    title,\n    content,\n    emailTo,\n    reportManager,\n    dateLimit\n  } = body;\n  const {\n    slug\n  } = req.query;\n  const {\n    user\n  } = req;\n  let status = 'success',\n      statusCode = 200,\n      error = '',\n      newJob = {};\n\n  try {\n    newJob = await models.jobs.create({\n      title,\n      content,\n      emailTo,\n      reportManager,\n      dateLimit,\n      status: 1,\n      userId: user.id\n    });\n  } catch (err) {\n    /* Sql error number */\n    statusCode = 500;\n    error = err.original.errno && 'Not available right now';\n    status = 'error';\n  }\n\n  return res.status(statusCode).json({\n    status,\n    error,\n    message: 'done',\n    data: newJob\n  });\n}) // Put method\n.put(async (req, res) => {\n  res.end('method - put');\n}) // Patch method\n.patch(async (req, res) => {\n  throw new Error('Throws me around! Error can be caught and handled.');\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Mr.X/Desktop/nextjs-sequelize/pages/api/job/[slug].js"],"names":["nextConnect","middleware","models","require","handler","use","get","req","res","query","slug","method","body","job","jobs","findOne","where","include","model","users","as","statusCode","json","status","data","post","id","name","title","content","emailTo","reportManager","dateLimit","user","error","newJob","create","userId","err","original","errno","message","put","end","patch","Error"],"mappings":"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","sourcesContent":["import nextConnect from 'next-connect';\r\nimport middleware from '../../../middleware/auth';\r\nconst models = require('../../../db/models/index');\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { slug },\r\n      method,\r\n      body,\r\n    } = req;\r\n    const job = await models.jobs.findOne({\r\n      where: {\r\n        slug: slug,\r\n      },\r\n      include: [\r\n        {\r\n          model: models.users,\r\n          as: 'user',\r\n        },\r\n      ],\r\n    });\r\n    res.statusCode = 200;\r\n    return res.json({ status: 'success', data: job });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const {\r\n      query: { id, name },\r\n      method,\r\n      body,\r\n    } = req;\r\n    const { title, content, emailTo, reportManager, dateLimit } = body;\r\n    const { slug } = req.query;\r\n    const { user } = req;\r\n    let status = 'success',\r\n      statusCode = 200,\r\n      error = '',\r\n      newJob = {};\r\n\r\n    try {\r\n      newJob = await models.jobs.create({\r\n        title,\r\n        content,\r\n        emailTo,\r\n        reportManager,\r\n        dateLimit,\r\n        status: 1,\r\n        userId: user.id,\r\n      });\r\n    } catch (err) {\r\n      /* Sql error number */\r\n      statusCode = 500;\r\n      error = err.original.errno && 'Not available right now';\r\n      status = 'error';\r\n    }\r\n\r\n    return res.status(statusCode).json({\r\n      status,\r\n      error,\r\n      message: 'done',\r\n      data: newJob,\r\n    });\r\n  })\r\n  // Put method\r\n  .put(async (req, res) => {\r\n    res.end('method - put');\r\n  })\r\n  // Patch method\r\n  .patch(async (req, res) => {\r\n    throw new Error('Throws me around! Error can be caught and handled.');\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}